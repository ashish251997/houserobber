/*Algorithm
step1: check the statement wheather length of nums is 0.
step2: return null if yes.
step3: declare nums, start and end.
step4: check the statement wheather start is greater than end.
step5: return null if yes.
step6: find the mid point and make it as root.
step7: Recursively construct the left subtree and make it the left child of root.
step8: Recursively construct the right subtree and make it the right child of root.
step9: return the root.
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums.length==0)
        {
            return null;
        }
		return sortedArrayToBST(nums, 0, nums.length-1);
	}
    public TreeNode sortedArrayToBST(int[] nums, int start, int end) {
		if (start>end)
        {
			return null;
        }
        int mid = (start+end) / 2;
		TreeNode root = new TreeNode(nums[mid]);
		root.left = sortedArrayToBST(nums, start, mid-1);
		root.right = sortedArrayToBST(nums, mid+1, end);
        return root;
    }
}
/* time complexity =O(n)
   space complexity =O(n) */