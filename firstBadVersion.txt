/*Algorithm
step1: Declare n.
step2: initialize start to 1 and end to n.
step3: run the loop until start+1 is less than end.
step4: calculate the mid point .
step5: check the statment wheather mid is a bad version.
step6: if yes than update the end to mid else update start to mid.
step7: check the statment wheather start is the bad version 
step8: if yes than return start orelse return end.
*/
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 1;
        int end = n;
        while(start+1 < end)
        {
            int mid = start+(end - start)/2;
            if(isBadVersion(mid))
            {
                end = mid;
            } 
            else
            {
                start = mid;    
            }            
        }
        if(isBadVersion(start))
        {
            return start;
        }
        return end;
    }
}
/*space complexity=O(n)
  time complexity=O(logn)*/