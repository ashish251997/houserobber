/*Algorithm
step1: Declare string s.
step2: check the statment wheather length of s is equal to 0.
step3: return true is yes.
step4: initialize start to 0 and end with length of string - 1.
step5: check the loop wheather start is less than end.
step6: check the loop where start is less than end and skip non-alphanumeric charcter at start.
step7: increment start.
step8: check the loop where start is less than end and skip non-alphanumeric charcter at end.
step9: decrement end.
step10: check the statment wheather the character at start is not equal to the character at end.
step11: return false if the statment is false else true.
step12: increment start and decrement end.
*/
class Solution {
    public boolean isPalindrome(String s) {
        if(s.length()==0)
        { 
            return true;
        }
        int start=0;
        int end=s.length()-1;
        while(start<end)
        {
            while(start<end && !Character.isLetterOrDigit(s.charAt(start)))
            {
                start++;
            }
            while(start<end && !Character.isLetterOrDigit(s.charAt(end)))
            {
                end--;
            }
            if(Character.toLowerCase(s.charAt(start))!=Character.toLowerCase(s.charAt(end)))
            { 
                return false;
            }
            start++; 
            end--;
        }
        return true;
    }
}
/*space complexity=O(n)
  time complexity=O(n)  */