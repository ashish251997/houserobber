/**
 step1: create a linked node.
 step2: asssign the head as p.
 step3: assign the position of l1 as p1.
 step4: assign the position of l2 as p2
 step5: check the loop .
 step6: check the if statement.
 step7: store the address of p1 in next node if true
 step8: or store the address of p2.
 step9: check the statment  p1 and p2 for null.
 step8: return value.
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2)
    {
        ListNode head = new ListNode(0);
        ListNode p=head;
        ListNode p1=l1;
        ListNode p2=l2;
        while(p1!=null && p2!=null)
        {
            if(p1.val < p2.val)
            {
                p.next = p1;
                p1 = p1.next;
            }
            else
            {
                p.next = p2;
                p2 = p2.next;
            }
            p=p.next;
        }
        if(p1!=null)
        {
            p.next = p1;
        }
        if(p2!=null)
        {
            p.next = p2;
        }
        return head.next;
    }
}

/* space complexity=O(n) 
   time complexity=O(kN) where k = no of linked lists */
